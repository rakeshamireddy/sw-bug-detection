/******************************************************************************
* Filename      : Kernel.hpp
* Source File(s): Kernel.cpp
* Description   :
* Authors(s)    :
* Date Created  :
* Date Modified :
* Modifier(s)   :
*******************************************************************************/
#ifndef KERNEL_H
#define KERNEL_H

/*******************************************************************************
*  INCLUDES
********************************************************************************/
#include <Vec.hpp>
namespace algorithms
{
namespace svm
{

/*******************************************************************************
*  DEFINES
********************************************************************************/

/*******************************************************************************
*  MACROS
********************************************************************************/

/*******************************************************************************
*  DATA TYPES
********************************************************************************/


/*******************************************************************************
*  EXTERNALS
********************************************************************************/

/*******************************************************************************
*  CLASS DEFINITIONS
********************************************************************************/
class Kernel
{
    public:
        enum KERNEL_TYPE { LINEAR=0, RBF, POLY, GAUSS };
        /* constructors */
        Kernel ( void ); /* default */
        Kernel ( enum KERNEL_TYPE, double );
        Kernel ( const Kernel& ); /* copy */
        Kernel& operator= ( const Kernel& ); /* assign */
        ~Kernel ( void );

        /* functions */
        //double function( const std::vector<double>&, const std::vector<double>& );
        double function( Vec*, Vec* );

        /* variables */
        enum KERNEL_TYPE type;
        double param;
        double constant;

    private:
};
}
}
#endif
